SET SERVEROUTPUT ON;
BEGIN
    dbms_output.put_line('HELLO WORLD');
    dbms_output.put_line('HELLO WORLD2');
    dbms_output.put_line('HELLO WORLD3');
    dbms_output.put_line('HELLO WORLD4');
END;

DECLARE
    EMP_ID NUMBER;
    EMP_NAME VARCHAR2(30);
BEGIN
     EMP_ID := 888;
     EMP_NAME:= '배장남';
     DBMS_OUTPUT.PUT_LINE('EMP_ID : ' || EMP_ID);
    DBMS_OUTPUT.PUT_LINE('EMP_NAME : ' || EMP_NAME);

END;
/
DECLARE
EMP_ID EMPLOYEE.EMP_ID%TYPE;
EMP_NAME EMPLOYEE.EMP_NAME%TYPE;

BEGIN
SELECT EMP_ID, EMP_NAME
INTO EMP_ID, EMP_NAME
FROM EMPLOYEE
WHERE EMP_ID = '&EMP_ID';
DBMS_OUTPUT.PUT_LINE('EMP_ID : ' || EMP_ID);
DBMS_OUTPUT.PUT_LINE('EMP_NAME : ' || EMP_NAME);

END;
/
DECLARE
    E EMPLOYEE%ROWTYPE;
BEGIN
    SELECT *INTO E
    FROM EMPLOYEE
    WHERE EMP_ID  ='&EMP_ID';
    DBMS_OUTPUT.PUT_LINE('EMP_ID :' || E.EMP_ID);
    DBMS_OUTPUT.PUT_LINE('EMP_NAME : ' || E.EMP_NAME);
    DBMS_OUTPUT.PUT_LINE('EMP_NO : ' || E.EMP_NO);
    DBMS_OUTPUT.PUT_LINE('SALARY : ' || E.SALARY);
END;
/
DECLARE
    TYPE EMP_ID_TABLE_TYPE IS TABLE OF EMPLOYEE_ID%TYPE
    INDEX BY BINARY_INTEGER;
    TYPE EMP_NAME_TABLE_TYPE IS TABLE OF EMPLOYEE_EMP_NAME%TYPE
    INDEX BY BINARY_INTIGER;
    
    EMP_ID_TABLE EMP_ID_TABLE_TYPE;
    EMP_NAME_TABLE EMP_NAME_TABLE_TYPE;
    
    I BINARY_INTEGER :=0;
BEGIN
    FOR K IN(SELECT EMP_ID, EMP_NAME FROM EMPLOYEE)LOOP
    I:=I + 1;
    EMP_ID_TABLE(I):=K.EMP_ID;
    EMP_NAME_TABLE(I):=K.ENP_NAME;
    END LOOP;
    FOR J IN 1..I LOOP
    DBMS_OUTPUT.PUT_LINE('EMP_ID : ' || EMP_ID_TABLE(J) || ', EMP_NAME : ' || EMP_NAME_TABLE(J));
    END LOOP;
END;
/

DECLARE
    EMP_ID EMPLOYEE.EMP_ID%TYPE;
    EMP_NAME EMPLOYEE.EMP_NAME%TYPE;
    SALARY EMPLOYEE.SALARY%TYPE;
    BONUS EMPLOYEE.BONUS%TYPE;
BEGIN
     SELECT EMP_ID, EMP_NAME, SALARY, NVL(BONUS,0)
     INTO EMP_ID,EMP_NAME, SALARY, BONUS
     FROM EMPLOYEE
     WHERE EMP_ID = '&EMP_ID';
     DBMS_OUTPUT.PUT_LINE('사번 : ' || EMP_ID);
    DBMS_OUTPUT.PUT_LINE('이름 : ' || EMP_NAME);
    DBMS_OUTPUT.PUT_LINE('급여 : ' || SALARY);
    IF(BONUS = 0) THEN 
    DBMS_OUTPUT.PUT_LINE('보너스를 지급받지 않는 사원입니다.');
    END IF;
    DBMS_OUTPUT.PUT_LINE('보너스율 : ' || BONUS * 100 || '%');
END;
/
--BEGIN
--    FOR N IN SELECET EMP_NAME FROM EMPLOYEE LOOP
--    DBMS_OUTPUT.PUT_LINE(N);
--    END LOOP;
--END;    
--/
DECLARE
    DUP_EMPNO EXCEPTION;
    PRAGMA EXCEPTION_INIT(DUP_EMPNO,-00001);
BEGIN
    UPDATE EMPLOYEE
    SET EMP_ID = '&사번'
    WHERE EMP_ID = 200;
EXCEPTION
    WHEN DUP_EMPNO
    THEN DEMS_OUTPUT.PUT_LINE('이미존재하는사번');
END;
/

CREATE OR REPLACE PROCEDURE PRO_EMP_ARG_TEST1
    (ARG_EMPID IN employee.emp_id%TYPE
    ,ARG_ENAME OUT employee.emp_name%TYPE
    ,ARG_SAL OUT employee.salary%TYPE
    ,ARG_BOU OUT employee.bonus%TYPE)
IS
BEGIN
    DBMS_OUTPUT.PUT_LINE('ARG_EMPID: '|| ARG_EMPID);
    SELECT emp_name, salary,BONUS
    INTO ARG_ENAME, ARG_SAL, ARG_BOU
    FROM employee
    WHERE emp_id=ARG_EMPID;
    DBMS_OUTPUT.PUT_LINE('ARG_ENAME:'|| ARG_ENAME);
END;
/
VARIABLE VAR_emp_id VARCHAR2(30);
VARIABLE VAR_emp_name VARCHAR2(30);
VARIABLE VAR_salary VARCHAR2(30);
VARIABLE VAR_BONUS VARCHAR2(30);
EXEC SELCET_EMPID(200, :VAR_EMP_NAME,:VAR_SALARY, :VAR_BONUS);

SELECT    * FROM employee;

create or replace procedure pro_all_emp
is
begin
    for e in(select * from employee)loop
        DBMS_OUTPUT.PUT_LINE(E.EMP_NAME);
        select_empid(e.emp_id, e.emp_name, e.salary, e.bonus);
    end loop;
end;
/
EXEC pro_all_emp;

DECLARE

TYPE EMP_RECORD_TYPE IS RECORD (
EMP_ID EMPLOYEE.EMP_ID%TYPE,
EMP_NAME EMPLOYEE.EMP_NAME%TYPE,
DEPT_TITLE DEPARTMENT.DEPT_TITLE%TYPE,
JOB_NAME JOB.JOB_NAME%TYPE

);
EMP_RECORD EMP_RECORD_TYPE;

BEGIN

SELECT EMP_ID, EMP_NAME, DEPT_TITLE, JOB_NAME INTO EMP_RECORD
FROM EMPLOYEE E, DEPARTMENT D, JOB J
WHERE E.DEPT_CODE = D.DEPT_ID
AND E.JOB_CODE = J.JOB_CODE
AND EMP_NAME = '&EMP_NAME';
DBMS_OUTPUT.PUT_LINE('사번 : ' || EMP_RECORD.EMP_ID);
DBMS_OUTPUT.PUT_LINE('이름 : ' || EMP_RECORD.EMP_NAME);
DBMS_OUTPUT.PUT_LINE('부서 : ' || EMP_RECORD.DEPT_TITLE);
DBMS_OUTPUT.PUT_LINE('직급 : ' || EMP_RECORD.JOB_NAME);

END;
/

--CREATE TABLE PRODUCT(
--    PCODE NUMBER PRIMARY KEY,
--    PNAME VARCHAR2(30),
--    BRAND VARCHAR2(30),
--    PRICE NUMBER,
--    STOCK NUMBER
--    );
--CREATE TABLE PRO_DETAIL(
--    DCODE NUMBER PRIMARY KEY,
--    PCODE NUMBER,
--    PDATE DATE,
--    AMOUNT NUMBER,
--    STATUS VARCHAR2(10),
--    FOREIGN KEY(PCODE) REFERENCES PRODUCT(PCODE)
--    );
--CREATE SEQUENCE SEQ_PCODE;
--CREATE SEQUENCE SEQ_DCODE;
--
--INSERT INTO PRODUCT
--VALUES(SEQ_PCODE.NEXTVAL, '갤럭스노트8', '삼송', 900000, 0);
--INSERT INTO PRODUCT
--VALUES(SEQ_PCODE.NEXTVAL, '아이뽀8', '사과', 1000000, 0);
--INSERT INTO PRODUCT
--VALUES(SEQ_PCODE.NEXTVAL, '대륙폰', '샤우미', 600000, 0);

--SELECT *
--FROM PRODUCT;

CREATE TABLE PRODUCT1(
    PCODE NUMBER PRIMARY KEY,
    PNAME VARCHAR2(30),
    BRAND VARCHAR2(30),
    PRICE NUMBER,
    STOCK NUMBER DEFAULT 0
    );
CREATE TABLE PRO_DETAIL1(
    DCODE NUMBER PRIMARY KEY,
    PCODE NUMBER,
    PDATE DATE,
    AMOUNT NUMBER,
    STATUS VARCHAR2(10),
    FOREIGN KEY(PCODE) REFERENCES PRODUCT(PCODE)
    );
CREATE SEQUENCE SEQ_PCODE1;
CREATE SEQUENCE SEQ_DCODE1;

INSERT INTO PRODUCT1
VALUES(SEQ_PCODE.NEXTVAL, '갤럭스노트8', '삼송', 900000, DEFAULT);
INSERT INTO PRODUCT1
VALUES(SEQ_PCODE.NEXTVAL, '아이뽀8', '사과', 1000000, DEFAULT);
INSERT INTO PRODUCT1
VALUES(SEQ_PCODE.NEXTVAL, '대륙폰', '샤우미', 600000, DEFAULT);

SELECT *
FROM PRODUCT1;

CREATE OR REPLACE TRIGGER TRG_02
AFTER INSERT ON PRO_DETAIL1
    FOR EACH ROW
        BEGIN
           IF :NEW.STATUS = '입고'
            THEN
                UPDATE PRODUCT1 SET STOCK = STOCK + :NEW.AMOUNT
                WHERE PCODE = :NEW.PCODE;
            END IF;
            IF :NEW.STATUS = '출고'
            THEN
                UPDATE PRODUCT1 SET STOCK = STOCK - :NEW.AMOUNT
                WHERE PCODE = :NEW.PCODE;
            END IF;
END;
/
CREATE OR REPLACE TRIGGER TRG_01
AFTER INSERT
ON PRO_DETAIL1
BEGIN
        DBMS_OUTPUT.PUT_LINE('TRG_01 실행.');
END;
/
INSERT INTO PRO_DETAIL1 VALUES (SEQ_DCODE.NEXTVAL,1, SYSDATE, 5, '입고');
INSERT INTO PRO_DETAIL1 VALUES (SEQ_DCODE.NEXTVAL,2, SYSDATE, 10, '입고');
INSERT INTO PRO_DETAIL1 VALUES (SEQ_DCODE.NEXTVAL,3, SYSDATE, 20, '입고');
INSERT INTO PRO_DETAIL1 VALUES (SEQ_DCODE.NEXTVAL,1, SYSDATE, 1, '출고');
INSERT INTO PRO_DETAIL1 VALUES (SEQ_DCODE.NEXTVAL,2, SYSDATE, 7, '출고');
INSERT INTO PRO_DETAIL1 VALUES (SEQ_DCODE.NEXTVAL,3, SYSDATE, 11, '출고');
INSERT INTO PRO_DETAIL1 VALUES (SEQ_DCODE.NEXTVAL,3, SYSDATE, 167, '출고');


SELECT *
FROM tb_department;
INSERT INTO TB_DEPARTMENT (DEPARTMENT_NO, DEPARTMENT_NAME, CATEGORY, OPEN_YN, CAPACITY)
VALUES ('001', '국어국문학과', '인문사회', 'Y', 20);
INSERT INTO TB_DEPARTMENT (DEPARTMENT_NO, DEPARTMENT_NAME, CATEGORY, OPEN_YN, CAPACITY)
VALUES ('002', '영어영문학과', '인문사회', 'Y', 36);

SELECT *
FROM tb_professor;
INSERT INTO tb_professor VALUES('김민성','김민성','김민성','김민성');
INSERT INTO tb_professor VALUES('김민성1','김민성1','김민성1','김민성1');

SELECT *
FROM tb_student;
INSERT INTO tb_student VALUES('A484076', '026', '차지수', '860930-1106355', '전주시 완산구 전동 140-1 전북매일신문', to_date('01-03-2004', 'dd-mm-yyyy'), 'N', 'P010');


--CREATE OR REPLACE TRIGGER TRG_03
--AFTER INSERT
--ON EMPLOYEE
--BEGIN
--
--DBMS_OUTPUT.PUT_LINE('신입사원이 입사했습니다.');
--
--END;
--/
--INSERT INTO EMPLOYEE VALUES (905, '길성춘', '690512-1151432',
--
--'gil_sj@kh.or.kr', '01035464455', 'D5', 'J3',
--'S5', 3000000, 0.1, 200, SYSDATE, NULL,
--DEFAULT);

--테이블 값변경
--alter table 테이블명 rename column 컬럼명 to 바꿀명
--alter table 테이블명 modify 자료형 to 바꿀 자료형
--dml - 인서트문 등등
--ddl - sql 테이블 
--desc tb_student